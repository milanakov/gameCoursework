// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Threading.Tasks;
using CoreGraphics;
using AppKit;

namespace MacOSApp_Game_2
{
	public static class Result121
	{
		public static string ResultPercent = "-";
	}
	public partial class Task121ViewController : NSViewController
	{
		private NSImage _rightAnswerImage;
		private NSImage _wrongAnswerImage;
		
		public Task121ViewController(IntPtr handle) : base(handle)
		{
			
		}
		
		public override void ViewDidLoad()
		{
			base.ViewDidLoad();
			NSColor backgroundColor = NSColor.FromRgb(
				(nfloat)(0xDF / 255.0),
				(nfloat)(0xE4 / 255.0),
				(nfloat)(0xEA / 255.0)
			);
			//dfe4ea
			//A8B7C5
			// Change the text field color

			// Set the background color of the view
			View.WantsLayer = true;
			if (View.Layer != null) View.Layer.BackgroundColor = backgroundColor.CGColor;
			
			/*var textColor = 
				NSColor.FromRgba(0xAC / 255f, 0xBA / 255f, 0xC9 / 255f, 1f); // Set the desired color
			task_text_121.TextColor = textColor;*/
			var textColor = NSColor.White;
			task_text_121.TextColor = textColor;
			
			var textFieldColor = 
				NSColor.FromRgba(0x52 / 255f, 0x42 / 255f, 0x5C / 255f, 1f); // Set the desired color
			task_text_121.BackgroundColor = textFieldColor;
			//52425C
			//675373
			
			// Update the text field appearance
			task_text_121.WantsLayer = true;
			if (task_text_121.Layer != null)
			{
				task_text_121.Layer.CornerRadius = 7f;
				task_text_121.Layer.MasksToBounds = true;
			}

			// Set the font size to 12sp
			//var fontSizeText = 12f;
			//var fontText = NSFont.SystemFontOfSize(fontSizeText, NSFontWeight.Regular);
			//task_text_121.Font = fontText;
			//task_text_121

			//7F94AC
			//5e7691
			var varColor = 
				NSColor.FromRgba(0x5E / 255f, 0x76 / 255f, 0x91 / 255f, 1f); // Set the desired color
			var1_bl1_121.TextColor = varColor;
			var2_bl1_121.TextColor = varColor;
			var3_bl1_121.TextColor = varColor;
			var1_bl2_121.TextColor = varColor;
			var2_bl2_121.TextColor = varColor;
			var3_bl2_121.TextColor = varColor;
			var1_bl3_121.TextColor = varColor;
			var2_bl3_121.TextColor = varColor;
			var3_bl3_121.TextColor = varColor;

			var fontSize = 14f;
			var font = NSFont.SystemFontOfSize(fontSize, NSFontWeight.Regular);
			task_text_121.Font = font;
			
			//=====================================
//7f94ac
			var labelSize = 12f;
			var fontLabel = NSFont.SystemFontOfSize(labelSize, NSFontWeight.Regular);
			var1_bl1_121.Font = fontLabel;
			var2_bl1_121.Font = fontLabel;
			var3_bl1_121.Font = fontLabel;
			var1_bl2_121.Font = fontLabel;
			var2_bl2_121.Font = fontLabel;
			var3_bl2_121.Font = fontLabel;
			var1_bl3_121.Font = fontLabel;
			var2_bl3_121.Font = fontLabel;
			var3_bl3_121.Font = fontLabel;
			
			// Create a custom NSView to represent the horizontal line
			var lineView0 = new NSView();
			var lineView1 = new NSView();
			var lineView2 = new NSView();
			lineView0.WantsLayer = true;
			lineView1.WantsLayer = true;
			lineView2.WantsLayer = true;

			// Set the line color
			var lineColor = NSColor.FromRgba(0x28 / 255f, 0x28 / 255f, 0x28 / 255f, 1f); // Replace with your desired color
			if (lineView0.Layer != null) lineView0.Layer.BackgroundColor = lineColor.CGColor;
			if (lineView1.Layer != null) lineView1.Layer.BackgroundColor = lineColor.CGColor;
			if (lineView2.Layer != null) lineView2.Layer.BackgroundColor = lineColor.CGColor;

			// Set the line height and position
			var lineHeight = 1.0f; 
			var lineYPosition0 = 412.0f; 
			lineView0.Frame = new CGRect(0, lineYPosition0, View.Frame.Width, lineHeight);
			
			var lineYPosition1 = 284.0f; 
			lineView1.Frame = new CGRect(0, lineYPosition1, View.Frame.Width, lineHeight);
			
			var lineYPosition2 = 112.0f; 
			lineView2.Frame = new CGRect(0, lineYPosition2, View.Frame.Width, lineHeight);

			// Add the line view to the main view
			View.AddSubview(lineView0);
			View.AddSubview(lineView1);
			//View.AddSubview(lineView2);

			// Do any additional setup after loading the view.
			//2B2B2C
			//ACBAC9
			//NSSegmentedControl block1_121_segmentedControl = NSSegmentedControl 
			
			// Подія натискання на кнопку
			//check_button_task121.Activated += CheckButtonTask121_Activated;ґ
			
			// Завантаження зображень
			var rightAnswerImagePath = "/Users/milana/Desktop/uni/knu/coursework/MacOSApp_Game_2/MacOSApp_Game_2/Resources/right_answer.png";
			var wrongAnswerImagePath = "/Users/milana/Desktop/uni/knu/coursework/MacOSApp_Game_2/MacOSApp_Game_2/Resources/wrong_answer.png";
			_rightAnswerImage = new NSImage(rightAnswerImagePath);
			_wrongAnswerImage = new NSImage(wrongAnswerImagePath);
			
		}
		//bool shouldDisableSegmentedControls = false;

		private void DisplayImageForSegment(NSSegmentedControl segmentedControl, nint correctSegment, CGPoint position)
		{
			var selectedSegment = segmentedControl.SelectedSegment;
			var imageView = new NSImageView(new CGRect(position.X, position.Y, 30, 30));

			if (selectedSegment == correctSegment)
			{
				imageView.Image = _rightAnswerImage;
			}
			else
			{
				imageView.Image = _wrongAnswerImage;
			}

			View.AddSubview(imageView);
		}

		partial void check_button_task121(NSButton sender)
		{
			// Disable the button
			sender.Enabled = false;
			
			// Disable segmented controls
			block1_121_segmentedControl.Enabled = false;
			block2_121_segmentedControl.Enabled = false;
			block3_121_segmentedControl.Enabled = false;

			// Display images for selected segments
			DisplayImageForSegment(block1_121_segmentedControl, 0, new CGPoint(877, 429));
			DisplayImageForSegment(block2_121_segmentedControl, 2, new CGPoint(877, 299));
			DisplayImageForSegment(block3_121_segmentedControl, 2, new CGPoint(877, 125));

			// Count the number of correct answers
			int correctAnswersCount = 0;

			// Check selected segments and increment the count
			if (block1_121_segmentedControl.SelectedSegment == 0)
				correctAnswersCount++;

			if (block2_121_segmentedControl.SelectedSegment == 2)
				correctAnswersCount++;

			if (block3_121_segmentedControl.SelectedSegment == 2)
				correctAnswersCount++;

			// Display the result gradually
			DisplayResultText(correctAnswersCount);
		}
		//public double ResultPercent { get; set; }
		//public double resultPercent;
		private async void DisplayResultText(int correctAnswersCount)
		{
			string resultText;

			if (correctAnswersCount == 0)
			{
				resultText = "О ні! У тебе жодної правильної відповіді, але не хвилюйся! Якщо тобі сподобалось працювати " +
				             "з кодом, то я чекаю тебе на спеціальності інженерія програмного забезпечення. Тебе тут " +
				             "усього навчать! А поки що можеш спробувати свої сили в інших " +
				             "спеціальностях.";
				Result121.ResultPercent = "0";
				//Console.WriteLine(Result121.ResultPercent);
			}
			else if (correctAnswersCount == 1)
			{
				resultText = "Твій результат 33.3%. Непогано! Сподіваюсь, тобі сподобалось працювати з кодом. Якщо так, " +
				             "то я чекаю тебе на спеціальності інженерія програмного забезпечення. А поки що можеш " +
				             "спробувати свої сили в інших спеціальностях.";
				Result121.ResultPercent = "33.3";
				//Console.WriteLine(Result121.ResultPercent);
			}
			else if (correctAnswersCount == 2)
			{
				resultText = "Твій результат 66.7%. Чудово! Сподіваюсь, тобі сподобалось працювати з кодом. Якщо так, " +
				             "то інженерія програмного забезпечення саме для тебе! А поки що можеш спробувати свої " +
				             "сили в інших спеціальностях.";
				Result121.ResultPercent = "66.7";
				//Console.WriteLine(Result121.ResultPercent);
			}
			else if (correctAnswersCount == 3)
			{
				resultText = "Твій результат приголомшливий! 100% правильних відповідей! Сподіваюсь, " +
				             "тобі сподобалось працювати з кодом. Якщо так, то інженерія програмного " +
				             "забезпечення саме для тебе! А поки що можеш спробувати свої сили в інших " +
				             "спеціальностях.";
				Result121.ResultPercent = "100";
				//Console.WriteLine(Result121.ResultPercent);
			}
			else
			{
				return; // Invalid count
			}

			// Clear the existing text
			task_text_121.StringValue = "";

			// Display the text gradually
			foreach (char c in resultText)
			{
				task_text_121.StringValue += c;
				await Task.Delay(TimeSpan.FromMilliseconds(20));
			}
		}
	}
}
